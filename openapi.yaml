openapi: 3.0.0
servers:
  - url: //api.tooldata.io/
    description: Default server
  # - url: //test-api.tooldata.io/
  #   description: Sandbox server
info:
  version: 1.0.0
  title: Tooldata Social Listening API
  description: |
    Tooldata es una empresa, con visión latinoamericana, que desarrolla herramientas para facilitar el acceso y la comprensión
    de información desde redes sociales, para contribuir en la toma de decisiones operativas y comunicacionales de sus clientes,
    de manera fácil y simple.
    Nuestro sistema de social listening te ayudará a:
    * Captar publicaciones de tú interés.
    * Analizar esas publicaciones y transformarla en información.
    * Mostrar la información de forma simple para que puedas tomar mejores decisiones y desarrollar mejores estrategias.

    # Introducción
    La documentación de nuestra API ayudará a nuestros clientes a llevar los datos a su CRM, herramientas de Business Intelligence
    o cualquier sistema de visualización.

    # Especificaciones de API
    A través de nuestra API podrás:
    * Consultar los proyectos de monitoreo configurados
    * Consultar publicaciones de los proyectos de monitoreos

    # Autenticación
    Para obtener la API Key debes ingesar a nuestro [sistema](https://app.tooldata.io) utilizando un uauario con permisos de Administrador.
    Para activar la API Key debes ingresar a "Administración -> API Keys-> Nuevo", luego agregar un nombre descriptivo y una o más IPs
    que podrán utilizar la API Key.

    <SecurityDefinitions />
  # termsOfService: 'https://www.tooldata.io/terms/'
  contact:
    name: Soporte Tooldata
    email: hola@tooldata.io
    url: https://www.tooldata.io
  x-logo:
    url: 'https://www.tooldata.io/assets/logo.png?v=e0d2f03442'
    altText: Tooldata logo
  # license:
  #   name: Apache 2.0
  #   url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# externalDocs:
#   description: Find out how to create Github repo for your OpenAPI spec.
#   url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: collection
    description: Las colecciones(collections) no son más que la unidad de almacenamiento de posts para cada proyecto
  - name: post
    description: Publicación de las diferentes medios digitales y redes sociales
  - name: collection_model
    x-displayName: Modelos Colecciones
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Collection" />
  - name: post_model
    x-displayName: Modelos de Publicaciones
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Post" />
x-tagGroups:
  - name: General
    tags:
      - collection
      - post
  - name: Modelos
    tags:
      - collection_model
      - post_model
paths:
  /collections:
    get:
      tags:
        - collection
      summary: Obtener las colecciones
      description: Devuelve una lista las colecciones del usuario
      operationId: getCollections
      responses:
        200:
          description: Operación éxitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        401:
          description: IP no permitida
        403:
          description: API Key no válida o requerida

      security:
        - ApiKey: []
      x-code-samples:
        - lang: Curl
          source: |
            curl -H 'Accept: application/json' \
                  -H "Authorization: ApiKey <your api key>" \
                  https://api.tooldata.io/collections

        - lang: Python
          source: |
            from requests import get

            API_URL = 'https://api.tooldata.io';
            ACCESS_TOKEN = '<your api key>';
            HEADERS = {
              'Content-type': 'application/json',
              'Authorization': 'ApiKey %s' % ACCESS_TOKEN
            }

            result = get('%s/collections' % API_URL, headers=HEADERS)
            print(result.json())

        - lang: JS
          source: |
            const API_URL = 'https://api.tooldata.io/';
            const ACCESS_TOKEN = '<your api key>';

            request({
              url: `${API_URL}/collections`,
              method: 'GET',
              headers: {
                'Content-type': 'application/json',
                'Authorization': 'ApiKey ' + ACCESS_TOKEN
              },
              callback: (error, response, body) => {
                if (error) return console.log(error);

                console.log(JSON.parse(body));
              }
            });

        - lang: PHP
          source: |
            DEFINE('API_URL', 'https://api.tooldata.io/');
            DEFINE('API_KEY', '<your api key>');

            $header = array();
            $header[] = 'Content-type: application/json';
            $header[] = 'Authorization: ApiKey ' . API_KEY;

            $curl = curl_init();
            $url = sprintf("%s/collections", API_URL);

            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

            $result = curl_exec($curl);
            curl_close($curl);

            print_r(json_decode($result, true));

  '/collections/{collectionId}/posts':
    get:
      tags:
        - post
      summary: Obtener posts de una colección por ID
      description: >-

      operationId: getPosts
      parameters:
        - name: collectionId
          in: path
          description: El ID para el nuevo
          required: true
          schema:
            type: string
            format: UUIDv4
        - name: since
          in: query
          description: Fecha de inicio de la consulta
          required: true
          schema:
            type: string
            format: ISO Date
        - name: until
          in: query
          description: Fecha de inicio de la consulta
          required: true
          schema:
            type: string
            format: ISO Date
        - name: page
          in: query
          description: Página de actual de los datos
          required: false
          schema:
            type: int
        - name: limit
          in: query
          description: Cantidad máxima de menciones por página (Por defecto 500 menciones por página máximo)
          required: false
          minimum: 1
          maximum: 500
          multipleOf: 1
          schema:
            type: int
        - name: tags[]
          in: query
          description: Etiquetas para filtrar los datos, este campo debe repetirse por cada etiqueta
          required: false
          schema:
            type: array
      security:
        - ApiKey: []
      x-code-samples:
        - lang: Curl
          source: |
            curl -H 'Accept: application/json' \
                  -H "Authorization: ApiKey <your api key>" \
                  https://api.tooldata.io/collections/<idCollection>/posts

        - lang: Python
          source: |
            from requests import get

            API_URL = 'https://api.tooldata.io'
            ACCESS_TOKEN = '<your api key>'
            COLLECTION_ID = '<idCollection>'

            HEADERS = {
              'Content-type': 'application/json',
              'Authorization': 'ApiKey %s' % ACCESS_TOKEN
            }

            since='2019-10-02T02:57:26.957Z'
            until='2019-12-09T22:17:54.987Z'
            url = '%s/collections/%s/posts?since=%s&until=%s' % (API_URL, COLLECTION_ID, since, until)

            result = get(url, headers=HEADERS)
            print(result.json())

        - lang: JS
          source: |
            const request = require('request');

            const API_URL = 'https://api.tooldata.io/';
            const ACCESS_TOKEN = '<your api key>';


            const idCollection = '<idCollection>'
            const query = {
              since: '2019-10-02T02:57:26.957Z',
              until: '2019-12-09T22:17:54.987Z'
            }

            request({
              url: `${API_URL}/collections/${idCollection}/posts`,
              method: 'GET',
              qs: query,
              headers: {
                'Content-type': 'application/json',
                'Authorization': 'ApiKey ' + ACCESS_TOKEN
              },
              callback: (error, response, body) => {
                if (error) return console.log(error);

                console.log(JSON.parse(body));
              }
            });

        - lang: PHP
          source: |
            DEFINE('API_URL', 'https://api.tooldata.io/');
            DEFINE('API_KEY', '<your api key>');

            $id_collection = '<idCollection>';
            $header = array();
            $header[] = 'Content-type: application/json';
            $header[] = 'Authorization: ApiKey ' . API_KEY;

            $curl = curl_init();
            $since = '2019-11-02T02:57:26.957Z';
            $until = '2019-12-09T22:17:54.987Z';
            $url = sprintf("%s/collections/%s/posts?since=%s&until=%s", API_URL, $id_collection, $since, $until);

            curl_setopt($curl, CURLOPT_URL, $url);
            curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

            $result = curl_exec($curl);
            curl_close($curl);

            print_r(json_decode($result, true));

      responses:
        200:
          description: Operación éxitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
        401:
          description: IP no permitida
        403:
          description: API Key no válida o requerida
        404:
          description: Colección no encontrada

components:
  schemas:
    response:
      type: object
      properties:
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        limit:
          type: integer
          description: Cantidad máxima de menciones por página
          example: 500
        page:
          type: integer
          description: Página actual
          example: 1
        pages:
          type: integer
          description: Cantidad totales de páginas
          example: 10
        total:
          type: integer
          description: Total de menciones
          example: 5000
    Id:
      type: string
      format: UUIDv4
      readOnly: true
    Date:
      type: string
      example: 2017-12-25T19:20:47.064Z
    Tags:
        type: array
        description: Array de etiquetas
        example: ['VIP', 'Alerta']
    Phrases:
        type: array
        description: Array de frases de valor dentro del texto
        example: ['pulso electromagnético', 'prodcuto interno bruto']
    Organizations:
        type: array
        description: Array de organizaciones, empresas, entidades o personas importantes mencionadas dentro del texto
        example: ['OMS', 'ONU', 'Congreso de la Républica', 'Greenpeace']
    Persons:
        type: array
        description: Array de personas importantes mencionadas dentro del texto
        example: ['Presidente JFK', 'Mahatma Gandhi', 'Salvador Dalí']
    Locations:
        type: array
        description: Array de ubicaciones mencionadas dentro del texto
        example: ['Bogotá, Colombia', 'Valparaiso', 'Perú, Lima']
    Commercial Items:
        type: array
        description: Array de productos comerciales mencionados dentro del texto
        example: ['PS5', 'iPhone', 'Freidora de Aire', 'Peluche Abracitos']
    Events:
        type: array
        description: Array de eventos mencionados dentro del texto
        example: ['Lollapalooza', 'Super Bowl']
    Dates:
        type: array
        description: Array de fechas mencionadas dentro del texto
        example: ['Hace par de semanas', 'próximo fin de semana', 'noviembre de 1984', '12/10/2012']
    Quantitys:
        type: array
        description: Array cantidades mencionadas dentro del texto
        example: ['10%', '65 lucas', 'veinte mil hectareas', 'demasiados articulos']
    User:
      type: object
      properties:
        id_str:
          type: string
          description: ID del usuario heredado de fuente del dato
          example: "442419559_442419559"
        name:
          type: string
          description: Nombre declarado por el usuario como "Nombre real"
          example: "Kambing Jantan 🐐"
        username:
          type: string
          description: Nombre de usuario para dicha fuente de datos(Medio digital o red social)
          example: ramablackhunter
        picture:
          type: string
          description: URL del avatar del usuario
          example: https://pbs.twimg.com/profile_images/1187193584547614720/UexmIfCm.jpg
        followers:
          type: integer
          description: cantidad de seguidores
          example: 160
        type_user:
          type: string
          description: Tipo de usuario o de que medio digital proviene
          enum:
            - twitter
            - facebook
            - instagram
        gender:
          type: string
          enum:
            - female
            - male
            - bussiness
            - other
        location:
          type: string
          description: Lugar declarado por el usuario
          example: "Valaparaiso, Chile"
    Collection:
      type: object
      required:
        - name
      properties:
        id:
          description: Identificador hexadecimal único para cada colección
          example: d3447be04dbb48e5fa522852a835e18e
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: The name given to a pet
          type: string
          example: Publicaciones de Twitter
        tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
        status:
          type: string
          description: Estado actual del proyecto
          enum:
            - running
            - paused
        created_at:
          description: Fecha de creación de la colección en formato ISO
          allOf:
            - $ref: '#/components/schemas/Date'
        updated_at:
          description: Fecha de la última actualización de la colección en formato ISO
          allOf:
            - $ref: '#/components/schemas/Date'
    Post:
      type: object
      discriminator:
          propertyName: type_post
          mapping:
            Twitter: '#/components/schemas/Twitter'
            Facebook: '#/components/schemas/Facebook'
            Instagram: '#/components/schemas/Instagram'
            Medios Digitales: '#/components/schemas/News'
      properties:
        id_str:
          type: string
          description: ID de la publicación
          readOnly: true
          example: '156484985298'
        user:
          description: Usuario autor de la publicación
          allOf:
            - $ref: '#/components/schemas/User'
        text:
          type: string
          description: Texto completo de la publicación de los datos
          example: "kan lu sering minem buat mainan lu, 😅"
        likes:
          type: integer
          description: Cantidad de "Me Gusta"
          example: 12
        shared:
          type: integer
          description: Cantidad de veces que dicha publicación ha sido compartida
          example: 20
        comments:
          type: integer
          description: Cantidad de comentarios
          example: 5
        score:
          type: number
          description: Basado en la cantidad de interacciones y el número de seguidores se le da un nivel de importancia o impacto a la publicación
          example: 1205.52
        engagement:
          type: number
          example: 12.7
        link:
          type: string
          description: Link a la publicación original
          example: https://twitter.com/ramablackhunter/status/1187583984269578240
        image:
          type: string
          description: Imagen o imágenes de la publicación o vista previa de contener un vídeo
          example: https://instagram.flim2-1.fna.fbcdn.net/v/t51.2885-15/e35/81324234_475987726626426_8306335761980630333_n.jpg?_nc_ht=instagram.flim2-1.fna.fbcdn.net&_nc_cat=106&_nc_ohc=EiGL9f-dMskAX96KefV&oh=64535ae9ce7691386c47b13d1f2430f4&oe=5ED7C73D
        sentiment:
          type: string
          description: Sentimiento de la publicación
          enum:
            - positive
            - neutral
            - negative
        type_post:
          type: string
          description: Fuente de la publicación
        location:
          type: string
          description: Lugar declarado por el usuario
          example: "Lima, Perú"
        created_at:
          description: Fecha de creación de la publicación en formato ISO
          allOf:
            - $ref: '#/components/schemas/Date'
        tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
        organizations:
          allOf:
            - $ref: '#/components/schemas/Organizations'
        persons:
          allOf:
            - $ref: '#/components/schemas/Persons'
        locations:
          allOf:
            - $ref: '#/components/schemas/Locations'
        commercial_items:
          allOf:
            - $ref: '#/components/schemas/Commercial Items'
        events:
          allOf:
            - $ref: '#/components/schemas/Events'
        dates:
          allOf:
            - $ref: '#/components/schemas/Dates'
        quantitys:
          allOf:
            - $ref: '#/components/schemas/Quantitys'
    Twitter:
      description: Publicación proveniente de Twitter
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            retweets:
              type: integer
              description: Cantidad de retweets del tweet
              example: 20
            replies:
              type: integer
              description: Cantidad de respuestas del tweet
              example: 14
            quoutes:
              type: integer
              description: Cantidad de veces que ha sido citado el tweet
              example: 22
    Instagram:
      description: Publicación proveniente de Instagram
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            comments:
              type: integer
              description: Cantidad de comentarios
              example: 12
    News:
      description: Publicaciones proveniente de Medios Digitales}
      allOf:
        - type: object
          properties:
            title:
              type: string
              description: Título de publicación
              example: "This title for news"
        - $ref: '#/components/schemas/Post'
    Facebook:
      description: Publicación proveniente de Facebook
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            title:
              type: string
              description: Título de publicación
              example: "This title Facebook Post"
            type:
              type: string
              description: Tipo de publicación
              enum:
                - video
                - link
                - foto
            reactions:
              type: object
              description: Cantidad totalizada y desglosada de las reacciones de la publicación
              properties:
                total:
                  type: integer
                  description: Cantidad de total de reacciones
                  example: 35
                love:
                  type: integer
                  example: 8
                wow:
                  type: integer
                  example: 10
                haha:
                  type: integer
                  example: 12
                sad:
                  type: integer
                  example: 10
                angry:
                  type: integer
                  example: 5
  securitySchemes:
    ApiKey:
      description: >
        Luego de haber creado y obtenido el `ApiKey` dentro de la aplicación de **Tooldata**,
        solo quedaría utilizar para obtener los datos.
      type: apiKey
      name: Authorization
      in: header
