openapi: 3.0.0
servers:
  - url: //api.tooldata.io/
    description: Default server
  - url: //test-api.tooldata.io/
    description: Sandbox server
info:
  version: 1.0.0
  title: Tooldata Social Listening API
  description: |
    Tooldata es una empresa, con visión latinoamericana, que desarrolla herramientas para facilitar el acceso y la comprensión
    de información desde redes sociales, para contribuir en la toma de decisiones operativas y comunicacionales de sus clientes,
    de manera fácil y simple.
    Nuestro sistema de social listening te ayudará a:
    * Captar publicaciones de tú interés.
    * Analizar esas publicaciones y transformarla en información.
    * Mostrar la información de forma simple para que puedas tomar mejores decisiones y desarrollar mejores estrategias.

    # Introducción
    La documentación de nuestra API ayudará a nuestros clientes a llevar los datos a su CRM, herramientas de Business Intelligence
    o cualquier sistema de visualización.

    # Especificaciones de API
    A través de nuestra API podrás:
    * Consultar los proyectos de monitoreo configurados
    * Consultar publicaciones de los proyectos de monitoreos

    # Autenticación
    Para obtener la API Key debes ingesar a nuestro [sistema](https://app.tooldata.io) utilizando un uauario con permisos de Administrador.
    Para activar la API Key debes ingresar a "Administración -> API Keys-> Nuevo", luego agregar un nombre descriptivo y una o más IPs
    que podrán utilizar la API Key.

    <SecurityDefinitions />
  # termsOfService: 'https://www.tooldata.io/terms/'
  contact:
    name: Soporte Tooldata
    email: hola@tooldata.io
    url: https://www.tooldata.io
  x-logo:
    url: 'https://www.tooldata.io/assets/logo.png?v=e0d2f03442'
    altText: Tooldata logo
  # license:
  #   name: Apache 2.0
  #   url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# externalDocs:
#   description: Find out how to create Github repo for your OpenAPI spec.
#   url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: collection
    description: Las colecciones(collections) no son más que la unidad de almacenamiento de posts para cada proyecto
  - name: post
    description: Publicación de las diferentes medios digitales y redes sociales
  - name: collection_model
    x-displayName: Modelos Colecciones
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Collection" />
  - name: post_model
    x-displayName: Modelos de publicaciones
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Post" />
x-tagGroups:
  - name: General
    tags:
      - collection
      - post
  - name: Modelos
    tags:
      - collection_model
      - post_model
paths:
  /collections:
    get:
      tags:
        - collection
      summary: Obtener las colecciones
      description: Devuelve una lista las colecciones del usuario
      operationId: getCollections
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
        - ApiKey: []
      x-code-samples:
        - lang: Curl
          source: |
            curl -H 'Accept: application/json' \
                  -H "Authorization: ApiKey <your api key>" \
                  https://api.tooldata.io/collections
        - lang: Python
          source: |
            PetStore.v1.Pet pet = new PetStore.v1.Pet();
            pet.setApiKey("your api key");
            pet.petType = PetStore.v1.Pet.TYPE_DOG;
            pet.name = "Rex";
            // set other fields
            PetStoreResponse response = pet.create();
            if (response.statusCode == HttpStatusCode.Created)
            {
              // Successfully created
            }
            else
            {
              // Something wrong -- check response for errors
              Console.WriteLine(response.getRawResponse());
            }
        - lang: JS
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->create($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
        - lang: PHP
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->create($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
  '/posts/{collectionId}':
    get:
      tags:
        - post
      summary: Obtener posts de una colección por ID
      description: >-

      operationId: getPosts
      parameters:
        - name: collectionId
          in: path
          description: El ID para el nuevo
          required: true
          schema:
            type: string
            format: UUIDv4
        - name: since
          in: query
          description: Fecha de inicio de la consulta
          required: true
          schema:
            type: string
            format: ISO Date
        - name: until
          in: query
          description: Fecha de inicio de la consulta
          required: true
          schema:
            type: string
            format: ISO Date
        - name: tags
          in: query
          description: Array de etiquetas para filtrar los datos
          required: false
          schema:
            type: array
      security:
        - ApiKey: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
components:
  schemas:
    Twitter:
      description: Publicación proveniente de Twitter
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            retweets:
              type: integer
              description: Cantidad de retweets de la publicación
              example: 20
    Instagram:
      description: Publicación proveniente de Instagram
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
    Facebook:
      description: Publicación proveniente de Facebook
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            title:
              type: string
              description: Título de publicación
              example: "This title Facebook Post"
            type:
              type: string
              description: Tipo de publicación
              enum:
                - video
                - link
                - foto
            reactions:
              type: object
              description: Cantidad totalizada y desglosada de las reacciones de la publicación
              properties:
                total:
                  type: integer
                  description: Cantidad de total de reacciones
                  example: 35
                love:
                  type: integer
                  example: 8
                wow:
                  type: integer
                  example: 10
                haha:
                  type: integer
                  example: 12
                sad:
                  type: integer
                  example: 10
                angry:
                  type: integer
                  example: 5
    Id:
      type: string
      format: UUIDv4
      readOnly: true
    Place:
      type: object
      properties:
        id:
          type: string
          example: "442419559"
        name:
          type: string
          example: "Indonesia"
    Date:
      type: string
      example: 2017-12-25T19:20:47.064Z
    User:
      type: object
      properties:
        id_str:
          type: string
          description: ID del usuario heredado de fuente del dato
          example: "442419559_442419559"
        name:
          type: string
          description: Nombre declarado por el usuario como "Nombre real"
          example: "Kambing Jantan 🐐"
        username:
          type: string
          description: Nombre de usuario para dicha fuente de datos(Medio digital o red social)
          example: ramablackhunter
        picture:
          type: string
          description: URL del avatar del usuario
          example: https://pbs.twimg.com/profile_images/1187193584547614720/UexmIfCm.jpg
        followers:
          type: integer
          description: cantidad de seguidores
          example: 160
        type_user:
          type: string
          description: Tipo de usuario o de que medio digital proviene
          enum:
            - twitter
            - facebook
            - instagram
        gender:
          type: string
          enum:
            - female
            - male
            - bussiness
            - other
        place:
          description: Lugar declarado por el usuario
          allOf:
            - $ref: '#/components/schemas/Place'
    Post:
      type: object
      discriminator:
          propertyName: type_post
          mapping:
            twitter: '#/components/schemas/Twitter'
            instagram: '#/components/schemas/Instagram'
            facebook: '#/components/schemas/Facebook'
      properties:
        id_str:
          type: string
          description: ID de la publicación
          readOnly: true
        user:
          description: Usuario autor de la publicación
          allOf:
            - $ref: '#/components/schemas/User'
        full_text:
          type: string
          description: Texto completo de la publicación de los datos
          example: "kan lu sering minem buat mainan lu, 😅"
        likes:
          type: integer
          description: Cantidad de "Me Gusta"
          example: 12
        shared:
          type: integer
          description: Cantidad de veces que dicha publicación ha sido compartida
          example: 20
        comments:
          type: integer
          description: Cantidad de comentarios
          example: 5
        link:
          type: string
          description: Link a la publicación original
          example: https://twitter.com/ramablackhunter/status/1187583984269578240
        image:
          type: string
          description: URL de la imagen, si la publicación contiene alguna
          example: https://scontent-iad3-1.cdninstagram.com/vp/2ee818c845b90a133d3ef55faaf05f9a/5D832EB2/t51.2885-15/e35/60606690_1861913407243904_3084166615872296555_n.jpg?_nc_ht=scontent-iad3-1.cdninstagram.com
        sentiment:
          type: string
          description: Sentimiento de la publicación
          enum:
            - positive
            - neutral
            - negative
        type_post:
          type: string
          description: Fuente de la publicación
        place:
          description: Lugar declarado por el usuario
          allOf:
            - $ref: '#/components/schemas/Place'
        created_at:
          description: Fecha de creación de la publicación en formato ISO
          allOf:
            - $ref: '#/components/schemas/Date'
    Collection:
      type: object
      required:
        - name
      properties:
        id:
          description: Identificador hexadecimal único para cada colección
          example: d3447be04dbb48e5fa522852a835e18e
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: The name given to a pet
          type: string
          example: Publicaciones de Twitter
        created_at:
          description: Fecha de creación de la colección en formato ISO
          allOf:
            - $ref: '#/components/schemas/Date'
        updated_at:
          description: Fecha de la última actualización de la colección en formato ISO
          allOf:
            - $ref: '#/components/schemas/Date'
        status:
          type: string
          description: Estado actual del proyecto
          enum:
            - running
            - paused
  securitySchemes:
    ApiKey:
      description: >
        Luego de haber creado y obtenido el `ApiKey` dentro de la aplicación de **Tooldata**,
        solo quedaría utilizar para obtener los datos.
      type: apiKey
      name: Authorization
      in: header

