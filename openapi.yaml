openapi: 3.0.0
servers:
  - url: //api.tooldata.io/
    description: Default server
  - url: //test-api.tooldata.io/
    description: Sandbox server
info:
  version: 1.0.0
  title: Tooldata Social Listening API
  description: |
    Tooldata es una empresa, con visión latinoamericana, que desarrolla herramientas para facilitar el acceso y la comprensión
    de información desde redes sociales, para contribuir en la toma de decisiones operativas y comunicacionales de sus clientes,
    de manera fácil y simple.
    Nuestro sistema de social listening te ayudará a:
    * Captar publicaciones de tú interés.
    * Analizar esas publicaciones y transformarla en información.
    * Mostrar la información de forma simple para que puedas tomar mejores decisiones y desarrollar mejores estrategias.

    # Introducción
    La documentación de nuestra API ayudará a nuestros clientes a llevar los datos a su CRM, herramientas de Business Intelligence
    o cualquier sistema de visualización.

    # Especificaciones de API
    A través de nuestra API podrás:
    * Consultar los proyectos de monitoreo configurados
    * Consultar publicaciones de los proyectos de monitoreos

    # Autenticación
    Para obtener la API Key debes ingesar a nuestro [sistema](https://app.tooldata.io) utilizando un uauario con permisos de Administrador.
    Para activar la API Key debes ingresar a "Administración -> API Keys-> Nuevo", luego agregar un nombre descriptivo y una o más IPs
    que podrán utilizar la API Key.

    <SecurityDefinitions />
  # termsOfService: 'https://www.tooldata.io/terms/'
  contact:
    name: Soporte Tooldata
    email: hola@tooldata.io
    url: https://www.tooldata.io
  x-logo:
    url: 'https://www.tooldata.io/assets/logo.png?v=e0d2f03442'
    altText: Tooldata logo
  # license:
  #   name: Apache 2.0
  #   url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# externalDocs:
#   description: Find out how to create Github repo for your OpenAPI spec.
#   url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: collection
    description: Las colecciones(collections) no son más que la unidad de almacenamiento de posts para cada proyecto
  - name: store
    description: Access to Petstore orders
  - name: collection_model
    x-displayName: Modelos Colecciones
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Collection" />
  - name: store_model
    x-displayName: The Order Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Order" exampleRef="#/components/examples/Order" showReadOnly={true} showWriteOnly={true} />
x-tagGroups:
  - name: General
    tags:
      - collection
      - store
  - name: Modelos
    tags:
      - collection_model
      - store_model
paths:
  /collection:
    # parameters:
      # - name: Accept-Language
      #   in: header
      #   description: "The language you prefer for messages. Supported values are en-US, en-CA, en-GB, en-US"
      #   example: en-US
      #   required: false
      #   schema:
      #     type: string
      #     default: en-US
      # - name: cookieParam
      #   in: cookie
      #   description: Some cookie
      #   required: true
      #   schema:
      #     type: integer
      #     format: int64
    get:
      tags:
        - collection
      summary: Obtener las colecciones
      description: Devuelve una lista las colecciones del usuario
      operationId: getCollections
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          deprecated: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
        - api_key: []
      x-code-samples:
        - lang: JS
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->create($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
        - lang: 'C#'
          source: |
            PetStore.v1.Pet pet = new PetStore.v1.Pet();
            pet.setApiKey("your api key");
            pet.petType = PetStore.v1.Pet.TYPE_DOG;
            pet.name = "Rex";
            // set other fields
            PetStoreResponse response = pet.create();
            if (response.statusCode == HttpStatusCode.Created)
            {
              // Successfully created
            }
            else
            {
              // Something wrong -- check response for errors
              Console.WriteLine(response.getRawResponse());
            }
        - lang: PHP
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->create($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
      requestBody:
        $ref: '#/components/requestBodies/Collection'
  '/posts/{collectionId}':
    get:
      tags:
        - store
      summary: Obtener posts de una colección por ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generated exceptions
      operationId: getOrderById
      parameters:
        - name: collectionId
          in: path
          description: El ID para el nuevo
          required: true
          schema:
            type: string
            format: UUIDv4
        - name: since
          in: query
          description: Fecha de inicio de la consulta
          required: true
          schema:
            type: string
            format: ISO Date
        - name: until
          in: query
          description: Fecha de inicio de la consulta
          required: true
          schema:
            type: string
            format: ISO Date
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    # Cat:
    #   description: A representation of a cat
    #   allOf:
    #     - $ref: '#/components/schemas/Collection'
    #     - type: object
    # Category:
    #   type: object
    #   properties:
    #     id:
    #       description: Category ID
    #       allOf:
    #         - $ref: '#/components/schemas/Id'
    #     name:
    #       description: Category name
    #       type: string
    #       minLength: 1
    #     sub:
    #       description: Test Sub Category
    #       type: object
    #       properties:
    #         prop1:
    #           type: string
    #           description: Dumb Property
    # Dog:
    #   description: A representation of a dog
    #   allOf:
    #     - $ref: '#/components/schemas/Collection'
    #     - type: object
    #       properties:
    #         packSize:
    #           type: integer
    #           format: int32
    #           description: The size of the pack the dog is from
    #           default: 1
    #           minimum: 1
    #       required:
    #         - packSize
    # HoneyBee:
    #   description: A representation of a honey bee
    #   allOf:
    #     - $ref: '#/components/schemas/Collection'
    #     - type: object
    #       properties:
    #         honeyPerDay:
    #           type: number
    #           description: Average amount of honey produced per day in ounces
    #           example: 3.14
    #       required:
    #         - honeyPerDay
    # Twitter:
    #   description: Publicación proveniente de Twitter
    #   allOf:
    #     - $ref: '#/components/schemas/Post'
    #     - type: object
    # Instagram:
    #   description: Publicación proveniente de Instagram
    #   allOf:
    #     - $ref: '#/components/schemas/Post'
    #     - type: object
    # Facebook:
    #   description: Publicación proveniente de Facebook
    #   allOf:
    #     - $ref: '#/components/schemas/Post'
    #     - type: object
    Id:
      type: string
      format: UUIDv4
      readOnly: true
    Order:
      type: object
      properties:
        id:
          description: Order ID
          allOf:
            - $ref: '#/components/schemas/Id'
        petId:
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        quantity:
          type: integer
          format: int32
          minimum: 1
          default: 1
        shipDate:
          description: Estimated ship date
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          description: Indicates whenever order was completed or not
          type: boolean
          default: false
          readOnly: true
        rqeuestId:
          description: Unique Request Id
          type: string
          writeOnly: true
    Collection:
      type: object
      required:
        - name
      properties:
        id:
          description: Identificador hexadecimal único para cada colección
          example: d3447be04dbb48e5fa522852a835e18e
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: The name given to a pet
          type: string
          example: Publicaciones de Twitter
        created_at:
          description: Fecha de creación de la colección en formato ISO
          type: string
          example: 2017-12-25T19:20:47.064Z
        updated_at:
          description: Fecha de la última actualización de la colección en formato ISO
          type: string
          example: 2017-12-25T19:20:47.064Z
        status:
          type: string
          description: Pet status in the store
          enum:
            - running
            - paused
  requestBodies:
    Collection:
      content:
        application/json:
          schema:
            allOf:
              - title:
              - description: My Pet
              - $ref: '#/components/schemas/Collection'
      description: Pet object that needs to be added to the store
      required: true
  securitySchemes:
    api_key:
      description: >
        Luego de haber creado y obtenido el `api-key` solo se debe utilizar
        como parte de autenticación para obtener los datos. ejemplo:
        `curl -H 'Accept: application/json' -H "Authorization: Bearer <API_KEY>" https://api.tooldata.io/collections`
      type: apiKey
      name: Authorization
      in: header
  examples:
    Order:
      value:
        quantity: 1,
        shipDate: 2018-10-19T16:46:45Z,
        status: placed,
        complete: false
